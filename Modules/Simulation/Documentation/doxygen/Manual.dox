/**
\page SimulationManualPage The MITK Simulation Module

The MITK simulation module provides medical simulation capabilities by integrating the Simulation Open Framework Architecture (SOFA) into MITK.

\section SimulationManualBuildInstructions Build Instructions

Activate the %CMake option <tt>MITK_USE_SOFA</tt> when configuring the MITK superbuild.
SOFA is automatically downloaded and built during the superbuild (as well as the MITK simulation module, which depends on SOFA).
Simulation-related plugins can be activated when configuring the MITK build, i.e. activate <tt>MITK_BUILD_org.mitk.gui.qt.simulation</tt>, which will automatically activate <tt>MITK_BUILD_org.mitk.simulation</tt> in turn.

\subsection SimulationManualSOFAPluginBuildInstructions SOFA Plugins

SOFA plugins are built automatically during the MITK superbuild if they are located in the right directory and contain a %CMake script to build them.

SOFA build configuration is originally qmake-based. However, for seamless MITK superbuild integration a %CMake-based build script is used instead.
After you activated the %CMake option <tt>MITK_USE_SOFA</tt>, SOFA complete with the %CMake-based build script is downloaded during the superbuild.
Following the MITK superbuild convention for external projects, it is located in the <tt>SOFA-src</tt> directory right beneath the top-level MITK build directory.
Following the SOFA convention for plugins, they should be located in <tt>applications/plugins</tt>.
Hence, create an <tt>applications/plugins</tt> directory in <tt>SOFA-src</tt> and place your plugin here, i.e. <tt>SOFA-src/applications/plugins/myplugin</tt>.

The second and last step is to create a <tt>CMakeLists.txt</tt> file inside your plugin directory.
Use the %CMake function <tt>add_sofa_library()</tt> to easily set up your plugin build script.
Below is an example of a <tt>CMakeLists.txt</tt> file for a fictional plugin named "myplugin":

\code
set(MYPLUGIN_SOURES
  Topologies/MyTopology.cpp
  MyInteraction.cpp
)

set(MYPLUGIN_LIBS
  sofa_base_topology
  sofa_user_interaction
)

add_sofa_library(myplugin NO_PREFIX)
\endcode

The naming of <tt>MYPLUGIN_SOURCES</tt> and <tt>MYPLUGIN_LIBS</tt> is crucial for <tt>add_sofa_library(myplugin)</tt> to find the sources and libraries.
For more information see <tt>SOFA-src/CMake/AddSOFALibrary.cmake</tt>.

Once your plugin is placed in the right directory and provides a <tt>CMakeLists.txt</tt> file it is built during the MITK superbuild.
Binaries of your plugin are placed in <tt>SOFA-build/bin</tt>.

SOFA plugins can be loaded at runtime via the simulation preferences by clicking the <tt>Add...</tt> button.

\image html SimulationPreferences.png The simulation preferences dialog box.

\section SimulationManualIntroduction Introduction

SOFA is split into the following three parts:

<ul>
  <li> Framework
  <li> Modules
  <li> Applications
</ul>

While the former two parts make up the actual framework functionality, the applications part provides end user applications, e.g. <tt>runSofa</tt>.
The MITK simulation module and plugins replace the applications part of SOFA and make use of the framework and modules parts in terms of a toolkit.

\image html SOFA_MITK.png Conceptional layers and dependencies of SOFA and the MITK simulation module.

\remark While the framework and modules parts of SOFA are LGPL-licensed, the applications part, which is not used by MITK, is GPL-licensed.

\section SimulationManualHowToUpdate How to supply SOFA to the MITK Superbuild

\remark If you are not a member of the MITK staff you can safely skip this section.

SOFA build configuration is originally qmake-based. However, for seamless MITK superbuild integration a %CMake-based build script is used instead.
To maintain this script and to ensure that it matches the right revision of SOFA we set up a Git repository at <tt>%git\@mitk.org:MITK-SOFA</tt>.

When the repository was updated a package named <tt>SOFA_<hash>.tar.gz</tt> must be created and uploaded to <tt>%http://mitk.org/download/thirdparty/</tt>.
<hash> consists of the last eight digits of the SHA1 ID of the commit.
To use the new package for the MITK superbuild, the URL and MD5 of the package must be updated in <tt>CMakeExternals/SOFA.cmake</tt>.

If you need to patch SOFA sources you must append your patch to <tt>CMakeExternals/PatchSOFA-rev<revision>.cmake</tt>.
Make sure that you keep the filename up to date regarding the revision of SOFA and update the filename for the patch command in <tt>CMakeExternals/SOFA.cmake</tt> too.

The commit messages of the MITK-SOFA repository contain valuable information on which parts of SOFA must be stripped from a newly checked out revision.
Please continue writing detailed commit messages when updating the repository.

Updating the repository to a new SOFA revision can be a time-consuming task.
The best way to keep track of changes and additions to the SOFA sources is to use a free folder comparing tool (e.g. dirdiff).
Especially look at <tt>.pro</tt> files which describe the individual SOFA projects.

\section SimulationManualDrawing Drawing

It is recommended that you are at least familiar with the basic concepts of SOFA, e.g. scene graphs and visitors, before you proceed reading.

Drawing is done by SOFA at three different places:

<ul>
  <li> <tt>sofa::component::visualmodel</tt> classes
  <li> <tt>sofa::core::visual::DrawTool</tt> class
  <li> <tt>sofa::helper::gl</tt> classes and functions
</ul>

These cases are handled by the MITK Simulation Module as follows.

\subsection SimulationManualDrawingVisualModel sofa::component::visualmodel

One of the most important drawing classes is <tt>OglModel</tt> since it makes up most of the visual part of a simulation scene.
It inherits from <tt>VisualModel</tt> (which encapsulates all API-independent drawing code) and contains OpenGL-related code to draw the visual model.

To hook into the drawing of visual models, the MITK Simulation Module creates an alias in the SOFA object system so that every <tt>OglModel</tt> and <tt>VisualModel</tt> node found in a scene file is used to instantiate a MITK <b>SimulationModel</b> class instead.
This class creates VTK actors that contain the visual model rather than drawing it directly.
The simulation mapper, which is responsible for drawing a simulation scene, utilizes the visitor mechanism of SOFA to collect all VTK actors of the scene tree and finally draws them.

\subsection SimulationManualDrawingDrawToolGL sofa::core::visual::DrawTool

The abstract class <tt>DrawTool</tt> and its default OpenGL implementation <tt>DrawToolGL</tt> provide the interface to draw basic primitives, e.g. points, lines, spheres, arrows, and so forth.
It is usually set by a call to <tt> sofa::core::visual::VisualParams::defaultInstance()->drawTool()</tt> at application initialization.

The MITK Simulation Module provide its own VTK-based implementation of <tt>DrawTool</tt>, namely <b>SimulationDrawTool</b>.
This class creates VTK actors instead of drawing anything directly.
There is one <b>SimulationDrawTool</b> per simulation scene and the simulation mapper draws all current VTK actors according to which simulation scene is drawn.

\subsection SimulationManualDrawingGL sofa::helper::gl

Classes and functions in this namespace are problematic since they don't support the SOFA object system and therefore cannot be easily replaced by own implementations.
Currently they are not handled by MITK at all and an OpenGL stub is injected into SOFA so that all draw related methods and functions in this namespace do practically nothing.
This stub is automatically downloaded during the MITK superbuild process (sofa-rev[rev]-gl.zip).
However, a patch is additionally applied by the superbuild script to SOFA which alters a few header files to include the stub header files instead of the original OpenGL/GLUT/GLEW ones.
*/