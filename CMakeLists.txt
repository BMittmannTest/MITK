PROJECT(MITK)

# only configure dart here if not already configured in the 
# parent directory
IF(NOT EXISTS ${PROJECT_BINARY_DIR}/../DartConfiguration.tcl)
INCLUDE(Dart)
ENDIF(NOT EXISTS ${PROJECT_BINARY_DIR}/../DartConfiguration.tcl)

INCLUDE(CMake/CoreHelpers.cmake)
INCLUDE(CMake/FunctionalityHelpers.cmake)
SET(KITNAME "MITK")
SET(LIBPOSTFIX "")
SET (LIBRARY_OUTPUT_PATH ${PROJECT_BINARY_DIR}/lib CACHE INTERNAL "Single output directory for building all libraries.")
SET (EXECUTABLE_OUTPUT_PATH ${PROJECT_BINARY_DIR}/bin CACHE INTERNAL "Single output directory for building all executables.")

# MITK_VERSION
SET(MITK_VERSION_MAJOR "0")
SET(MITK_VERSION_MINOR "7")
SET(MITK_VERSION_PATCH "4")
SET(MITK_VERSION_STRING "${MITK_VERSION_MAJOR}.${MITK_VERSION_MINOR}.${MITK_VERSION_PATCH}")

IF(NOT MITK_KITNAME_FOR_MAINAPP)
SET(MITK_KITNAME_FOR_MAINAPP MITK)
ENDIF(NOT MITK_KITNAME_FOR_MAINAPP)
IF(NOT MITK_DIR)
SET(MITK_DIR ${CMAKE_CURRENT_BINARY_DIR})
ENDIF(NOT MITK_DIR)

FIND_PACKAGE(ITK)
IF(${ITK_VERSION_MAJOR}.${ITK_VERSION_MINOR}.${ITK_VERSION_PATCH} STRLESS "3.0.1")
  MESSAGE(SEND_ERROR "ITK 3.0.1 or later required")
ENDIF(${ITK_VERSION_MAJOR}.${ITK_VERSION_MINOR}.${ITK_VERSION_PATCH} STRLESS "3.0.1")

INCLUDE(CMakeImportBuildSettings)
IF(ITK_BUILD_SETTINGS_FILE)
CMAKE_IMPORT_BUILD_SETTINGS(${ITK_BUILD_SETTINGS_FILE})
ENDIF(ITK_BUILD_SETTINGS_FILE)

# see bug #347: problems occur when mixing release/debug. So maybe a more specific check
# could be implemented to allow static ITK again.
IF(WIN32 AND ITK_BUILD_SHARED)
MESSAGE(SEND_ERROR "Using ITK shared libs on windows causes trouble. Please recompile ITK with BUILD_SHARED_LIBS OFF")
ENDIF(WIN32 AND ITK_BUILD_SHARED)

FIND_PACKAGE(VTK)
APPLY_VTK_FLAGS()

IF(UNIX)
OPTION(BUILD_SHARED_LIBS "Build MITK with shared libraries." ON)
ELSE(UNIX)
OPTION(BUILD_SHARED_LIBS "Build MITK with shared libraries." OFF)
ENDIF(UNIX)
OPTION(USE_ITKZLIB "Use the ITK zlib for pic compression." ON)
OPTION(MITK_CHILI_PLUGIN "Build MITK for use as a CHILI plugin" OFF)
IF(MITK_CHILI_PLUGIN)
  FIND_PATH(MITK_CHILI_PLUGIN_SDK sdk
            PATHS ENV CHILI
  )
  IF(MITK_CHILI_PLUGIN_SDK)
    SET(MITK_CHILI_PLUGIN_SDK_IPPIC_H ${MITK_CHILI_PLUGIN_SDK}/include/ipPic/ipPic.h)
    SET(MITK_CHILI_PLUGIN_SDK_IPTYPES_H ${MITK_CHILI_PLUGIN_SDK}/include/ipPic/ipTypes.h)
    IF(NOT EXISTS ${MITK_CHILI_PLUGIN_SDK_IPPIC_H})
       MESSAGE(SEND_ERROR "ipPic.h of sdk not found. Looked for ${MITK_CHILI_PLUGIN_SDK_IPPIC_H}")
    ENDIF(NOT EXISTS ${MITK_CHILI_PLUGIN_SDK_IPPIC_H})
  ENDIF(MITK_CHILI_PLUGIN_SDK)
  FIND_LIBRARY(CHILI_IPPIC_LIB ipPic ${MITK_CHILI_PLUGIN_SDK}/lib)
  FIND_LIBRARY(CHILI_IPFUNC_LIB ipFunc ${MITK_CHILI_PLUGIN_SDK}/lib)
  IF(WIN32) 
    FIND_LIBRARY(CHILI_LIB chili ${MITK_CHILI_PLUGIN_SDK}/lib)
    SET(CHILI_ZLIB_H ${MITK_CHILI_PLUGIN_SDK}/include/zlib/zlib.h)
    CONFIGURE_FILE(zlib.h.in ${PROJECT_BINARY_DIR}/zlib.h)
  ENDIF(WIN32)
ENDIF(MITK_CHILI_PLUGIN)

SET(CORE_DIRECTORIES DataStructures Algorithms IO Rendering Interactions Controllers)


FOREACH(d ${CORE_DIRECTORIES})
  SET(${KITNAME}_INCLUDE_DIRS ${${KITNAME}_INCLUDE_DIRS} ${CMAKE_CURRENT_SOURCE_DIR}/Core/${d})
  SET(${KITNAME}_CORE_LIBRARIES ${${KITNAME}_CORE_LIBRARIES} mitk${d})
ENDFOREACH(d)

SET(${KITNAME}_INCLUDE_DIRS ${PROJECT_BINARY_DIR} ${${KITNAME}_INCLUDE_DIRS} ${ITK_INCLUDE_DIRS} ${VTK_INCLUDE_DIRS})

FOREACH(dir Core/DataStructures/mitkDataStorage Utilities Utilities/ipPic
Utilities/IIL4MITK Utilities/pic2vtk Utilities/tinyxml)
  SET(${KITNAME}_INCLUDE_DIRS ${${KITNAME}_INCLUDE_DIRS} ${CMAKE_CURRENT_SOURCE_DIR}/${dir})
ENDFOREACH(dir)
  

IF(WIN32)
  SET(${${KITNAME}_INCLUDE_DIRS} ${${KITNAME}_INCLUDE_DIRS} ${CMAKE_CURRENT_SOURCE_DIR}/Utilities/ipPic/win32)
ENDIF(WIN32)

SET(${KITNAME}_INCLUDE_DIRS ${CMAKE_CURRENT_SOURCE_DIR}/Utilities/itkUNC ${${KITNAME}_INCLUDE_DIRS})
SET(MITK_LINK_DIRECTORIES ${LIBRARY_OUTPUT_PATH} ${ITK_LIBRARY_DIRS} ${VTK_LIBRARY_DIRS})
LINK_DIRECTORIES(${MITK_LINK_DIRECTORIES})

IF(VTK_MAJOR_VERSION EQUAL 5)
    SET(VTK_FOR_MITK_LIBRARIES
      vtkGraphics vtkCommon vtkFiltering vtkftgl vtkGraphics vtkHybrid vtkImaging vtkIO vtkParallel vtkRendering vtkVolumeRendering vtkWidgets ${VTK_JPEG_LIBRARIES} ${VTK_PNG_LIBRARIES} ${VTK_ZLIB_LIBRARIES} ${VTK_EXPAT_LIBRARIES} ${VTK_FREETYPE_LIBRARIES}
)
ELSE(VTK_MAJOR_VERSION EQUAL 5)
    SET(VTK_FOR_MITK_LIBRARIES
  vtkGraphics vtkCommon vtkFiltering vtkftgl vtkGraphics vtkHybrid vtkImaging vtkIO ${VTK_JPEG_LIBRARIES} vtkParallel vtkPatented ${VTK_PNG_LIBRARIES} vtkRendering ${VTK_ZLIB_LIBRARIES} ${VTK_EXPAT_LIBRARIES} vtkfreetype
)
ENDIF(VTK_MAJOR_VERSION EQUAL 5)

# ipPic
IF(CHILI_IPPIC_LIB AND MITK_CHILI_PLUGIN)
IF(WIN32)
  SET(IPPIC_LIBRARIES
    ${CHILI_LIB} 
  )
ELSE(WIN32)
  SET(IPPIC_LIBRARIES
    ${CHILI_IPPIC_LIB} z
  )
ENDIF(WIN32)

SET(IPFUNC_LIBRARY
  ${CHILI_IPFUNC_LIB}
)

ELSE(CHILI_IPPIC_LIB AND MITK_CHILI_PLUGIN)
SET(IPPIC_LIBRARIES
 mitkIpPic
)
SET(IPFUNC_LIBRARY
  mitkIpFunc
)
ENDIF(CHILI_IPPIC_LIB AND MITK_CHILI_PLUGIN)
SET(UTIL_FOR_MITK_LIBRARIES ${IPPIC_LIBRARIES})
SET(LIBRARIES_FOR_MITK_CORE
  ${LIBRARIES_FOR_${KITNAME}_CORE} ${UTIL_FOR_${KITNAME}_LIBRARIES} ${VTK_FOR_${KITNAME}_LIBRARIES} ${ITK_LIBRARIES}
)

SUBDIRS(Utilities Core) 

SET(ANN_INCLUDE_DIR ${CMAKE_CURRENT_SOURCE_DIR}/Utilities/ann/include)
SET(IPSEGMENTATION_INCLUDE_DIR ${CMAKE_CURRENT_SOURCE_DIR}/Utilities/ipSegmentation)

OPTION(BUILD_TESTING "Build the MITK tests." ON)
IF(BUILD_TESTING)
ENABLE_TESTING()
ADD_SUBDIRECTORY(Testing)
ENDIF(BUILD_TESTING)

OPTION(USE_QT "Use Trolltech's Qt library" ON)

IF(USE_QT)
  SET(QT_MT_REQUIRED 1)
  FIND_PACKAGE(Qt3)
  SET(Q${KITNAME}_INCLUDE_DIRS ${${KITNAME}_INCLUDE_DIRS} ${CMAKE_CURRENT_SOURCE_DIR}/Qmitk ${PROJECT_BINARY_DIR}/Qmitk ${QT_INCLUDE_DIR})
  FOREACH(dir QmitkFunctionalityBase QmitkPropertyObservers QmitkApplicationBase QmitkFunctionalityComponents QmitkDialogBars) 
 SET(Q${KITNAME}_INCLUDE_DIRS ${Q${KITNAME}_INCLUDE_DIRS} ${CMAKE_CURRENT_SOURCE_DIR}/Qmitk/${dir})
ENDFOREACH(dir)
 INCLUDE(CMake/FunctionalityHelpers.cmake)
 SET(LIBS_FOR_QFUNCTIONALITY "Qmitk")
 SUBDIRS(Qmitk QFunctionalities QApplications)
ENDIF(USE_QT)

ADD_SUBDIRECTORY(Documentation)
#### mitkConfig.h ####
SET(MITK_CONFIG_H ${PROJECT_BINARY_DIR}/mitkConfig.h)
CONFIGURE_FILE(mitkConfig.h.in ${MITK_CONFIG_H})
SET(MITK_TESTING_CONFIG_H ${PROJECT_BINARY_DIR}/mitkTestingConfig.h)
CONFIGURE_FILE(mitkTestingConfig.h.in ${MITK_TESTING_CONFIG_H})
SET(${KITNAME}_INCLUDE_DIRS_CONFIG ${${KITNAME}_INCLUDE_DIRS})
SET(Q${KITNAME}_INCLUDE_DIRS_CONFIG ${Q${KITNAME}_INCLUDE_DIRS})
SET(VECMATH_INCLUDE_DIR ${CMAKE_CURRENT_SOURCE_DIR}/Utilities/vecmath)
SET(IPFUNC_INCLUDE_DIR ${CMAKE_CURRENT_SOURCE_DIR}/Utilities/ipFunc)
SET(UTILITIES_DIR ${CMAKE_CURRENT_SOURCE_DIR}/Utilities)
SET(REGISTER_QFUNCTIONALITY_CPP_IN "${PROJECT_SOURCE_DIR}/Qmitk/QmitkApplicationBase/RegisterQFunctionality.cpp.in")
SET(MITK_LIBRARIES ${MITK_CORE_LIBRARIES} ${LIBRARIES_FOR_MITK_CORE})
CONFIGURE_FILE(${KITNAME}Config.cmake.in ${PROJECT_BINARY_DIR}/${KITNAME}Config.cmake @ONLY)

